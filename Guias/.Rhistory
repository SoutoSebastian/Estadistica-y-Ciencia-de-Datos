}
resultados[[paste0("n =", n)]][[paste0("p =", p)]] <- list(
ic1 = intervalos1,
ic2 = intervalos2,
l1 = long1,
l2 = long2,
c1 = cubre1,
c2 = cubre2
)
}
}
View(resultados)
# Inicializamos el data.frame para resultados resumidos
summary_results <- data.frame()
for (nname in names(resultados)) {
for (pname in names(resultados[[nname]])) {
res <- resultados[[nname]][[pname]]
# longitud esperada
mean_len1 <- mean(res$l1)
mean_len2 <- mean(res$l2)
# cubrimiento empírico
cover1 <- mean(res$c1)
cover2 <- mean(res$c2)
# extraer valores numéricos de las etiquetas
n_val <- as.numeric(sub("n = ", "", nname))
p_val <- as.numeric(sub("p = ", "", pname))
# agregamos al data.frame
summary_results <- rbind(summary_results,
data.frame(n = n_val, p = p_val,
mean_len1 = mean_len1,
mean_len2 = mean_len2,
cover1 = cover1,
cover2 = cover2))
}
}
View(summary_results)
# Inicializamos el data.frame para resultados resumidos
summary_results <- data.frame()
for (nname in names(resultados)) {
for (pname in names(resultados[[nname]])) {
res <- resultados[[nname]][[pname]]
# longitud esperada
mean_len1 <- mean(res$l1)
mean_len2 <- mean(res$l2)
# cubrimiento empírico
cover1 <- mean(res$c1)
cover2 <- mean(res$c2)
# extraer valores numéricos de los nombres
n_val <- as.numeric(gsub("[^0-9]", "", nname))
p_val <- as.numeric(gsub("[^0-9\\.]", "", pname))
summary_results <- rbind(summary_results,
data.frame(n = n_val, p = p_val,
mean_len1 = mean_len1,
mean_len2 = mean_len2,
cover1 = cover1,
cover2 = cover2))
}
}
A <- c(250,252,245,258,240,247,251,249,250,243,247,260,238,241,239)
B <- c(330,335,327,329,320,332,337,328,334,326,331,332,328,329,337,341,336,338,325,321)
t.test(A, B, var.equal = TRUE, conf.level = 0.99)$conf.int
sd(A)
sd(B)
n1 <- 15
n2 <- 20
A <- c(250,252,245,258,240,247,251,249,250,243,247,260,238,241,239)
B <- c(330,335,327,329,320,332,337,328,334,326,331,332,328,329,337,341,336,338,325,321)
t.test(A, B, var.equal = TRUE, conf.level = 0.99)$conf.int
sd1(A)
n1 <- 15
n2 <- 20
A <- c(250,252,245,258,240,247,251,249,250,243,247,260,238,241,239)
B <- c(330,335,327,329,320,332,337,328,334,326,331,332,328,329,337,341,336,338,325,321)
t.test(A, B, var.equal = TRUE, conf.level = 0.99)$conf.int
s1 <- sd(A)
s2 <- sd(B)
quantil1 <- qchisq(1-0.005, 33)
quantil2 <- qchisq(0.005,33)
num <- sd1^2*(n1-1) + sd2^2*(n2-1)
n1 <- 15
n2 <- 20
A <- c(250,252,245,258,240,247,251,249,250,243,247,260,238,241,239)
B <- c(330,335,327,329,320,332,337,328,334,326,331,332,328,329,337,341,336,338,325,321)
t.test(A, B, var.equal = TRUE, conf.level = 0.99)$conf.int
s1 <- sd(A)
s2 <- sd(B)
quantil1 <- qchisq(1-0.005, 33)
quantil2 <- qchisq(0.005,33)
num <- s1^2*(n1-1) + s2^2*(n2-1)
izq <- num / quantil1
der <- num / quantil2
intervalo <- c(izq,der)
s1 <- sd(A)
s2 <- sd(B)
quantil1 <- qchisq(1-0.05, 33)
quantil2 <- qchisq(0.05,33)
num <- s1^2*(n1-1) + s2^2*(n2-1)
izq <- sqrt(num / quantil1)
der <- sqrt(num / quantil2)
intervalo <- c(izq,der)
A <- c(41, 37, 36, 39, 44, 42, 38, 37, 35, 32, 39, 30, 40, 41, 37)
B <- c(39, 35.3, 33.5, 36, 42.5, 38, 36, 34.8, 33.2, 29, 29, 36.6, 28.4, 38.5, 39)
Z <- A - B
prom <- mean(Z)
sZ <- sd(Z)
cuantil <- qt(1-0.025,14)
n <- length(Z)
termino <- cuantil * (sZ/sqrt(n))
A <- c(41, 37, 36, 39, 44, 42, 38, 37, 35, 32, 39, 30, 40, 41, 37)
B <- c(39, 35.3, 33.5, 36, 42.5, 38, 36, 34.8, 33.2, 29, 29, 36.6, 28.4, 38.5, 39)
Z <- A - B
prom <- mean(Z)
sZ <- sd(Z)
n <- length(Z)
cuantil <- qt(1-0.025,14)
termino <- cuantil * (sZ/sqrt(n))
izq <- prom - termino
der <- prom + termino
intervalo <- c(izq, der)
qnorm(1-0.005,0,1)
setwd("C:/Users/Sebastian/Desktop/Estadistica-y-Ciencia-de-Datos/Guias")
datos <- read.table("datos1.txt")
View(datos)
datos <- read.table("datos1.txt", header = TRUE)
View(datos)
mediana <- quantile(datos, 0.5)
media <- mean(datos$x)
mediana <- quantile(datos$x, 0.5)
mediana <- median(datos$x)
muestraboot <- sample(datos$x, datos$x.length, replace = TRUE)
datos$x.length
muestraboot <- sample(datos$x, length(datos$x), replace = TRUE)
mebiaboot <- mean(muestraboot)
medianaboot <- median(muestraboot)
mediasboot <- 0
medianasboot <- 0
for (i in 1:1000){
muestrab <- sample(datos$x, length(datos$x), replace = TRUE)
mediasboot[i] <- mean(muestrab)
medianasboot[i] <- median(muestrab)
}
sdMedia <- sd(mediasboot)
sdMediana <- sd(medianasboot)
set.seed(2025)
datos2 <- scan(what = numeric(), text = "2 2 4 6 1 3 1 3 2 4 4 4 4 4 6 3 3 4 1 2 1 6 3 2 3 4 1 1 5 4 1 4 6
4 1 2 1 5 4 3 3 1 3 1 6 5 1 3 2 3 6 2 4 2 6 6 5 2 4 4 1 4 3 1 2 1
6 1 1 3 1 6 6 1 2 6 1 1 4 5 4 1 5 2 2 1 6 6 1 2 1 3 1 3 3 4 3 3 3 5")
muestraboot <- sample(datos2, length(datos2), replace = TRUE)
estTita <- mean(muestraboot == 5)
muestraboot == 5
titas.boot <- 0
for (i in 1:5000){
muestrab <- sample(datos2, length(datos2), replace = TRUE)
titas.boot[i] <- mean(muestrab == 5)
}
hist(titas.boot,
main = "estimaciones bootstrap",
freq = FALSE,
col = "lightblue"
)
se_est <- sd(titas.boot)
alfa <- 0.05
cuantil <- qnorm(0.975, mean = 0, sd = 1)
termino <- cuantil * se_est
izq <- estTita - termino
der <- estTita + termino
intervalo_normal <- c(izq, der)
intervalo_cuantil <- quantile(titas.boot, probs = c(alfa/2, 1-alfa/2))
install.packages(Lock5Data)
install.packages("Lock5Data")
library(Lock5Data)
data("MustangPrice")
dataMustang <- data("MustangPrice")
force(MustangPrice)
View(MustangPrice)
data("MustangPrice")
plot(MustangPrice$Miles, MustangPrice$Price,
main = "Precio vs. Kilometraje",
xlab = "Millas recorridas",
ylab = "Precio (USD)",
pch = 19, col = "steelblue")
est_correlacion <- cor(MustangPrice$Miles, MustangPrice$Price)
corBoot <- 0
for (i in 1:5000){
muestrabPrice <- sample(MustangPrice$Price, length(MustangPrice$Price, replace = TRUE))
muestrabMiles <- sample(MustangPrice$Miles, length(MustangPrice$Miles, replace = TRUE))
corBoot <- cor(muestrabMiles, muestrabPrice)
}
for (i in 1:5000){
muestrabPrice <- sample(MustangPrice$Price, length(MustangPrice$Price), replace = TRUE))
for (i in 1:5000){
muestrabPrice <- sample(MustangPrice$Price, length(MustangPrice$Price), replace = TRUE)
muestrabMiles <- sample(MustangPrice$Miles, length(MustangPrice$Miles), replace = TRUE)
corBoot <- cor(muestrabMiles, muestrabPrice)
}
corBoot <- 0
for (i in 1:5000){
muestrabPrice <- sample(MustangPrice$Price, length(MustangPrice$Price), replace = TRUE)
muestrabMiles <- sample(MustangPrice$Miles, length(MustangPrice$Miles), replace = TRUE)
corBoot[i] <- cor(muestrabMiles, muestrabPrice)
}
hist(cor.boot,
main = "estimaciones correlacion bootstrap",
freq = FALSE,
col = "lightblue"
)
hist(corBoot,
main = "estimaciones correlacion bootstrap",
freq = FALSE,
col = "lightblue"
)
corBoot <- 0
for (i in 1:5000){
muestrab <- MustangPrice[sample(1:nrow(MustangPrice), nrow(MustangPrice), replace = TRUE), ]
corBoot[i] <- cor(muestrab$Miles, muestrab$Price)
}
hist(corBoot,
main = "estimaciones correlacion bootstrap",
freq = FALSE,
col = "lightblue"
)
alfa <- 0.05
intervalo_correlacion <- quantile(corBoot, probs = c(alfa/2, 1-alfa/2))
hist(corBoot,
main = "Bootstrap de la correlación",
freq = FALSE,
col = "lightblue",
xlab = "Coeficiente de correlación")
abline(v = intervalo_correlacion, col = "red", lwd = 2, lty = 2)  # límites
datos_personas <- read.table("personas_tot.urb_3T_21", header = TRUE)
datos_personas <- read.table("personas_tot.urb_3T_21.txt", header = TRUE)
View(datos_personas)
View(datos_personas)
datosP <- read.table("personas_tot.urb_3T_21.txt",
header = TRUE,    # la primera fila tiene nombres de columna
sep = ";",        # separador es ;
stringsAsFactors = FALSE, # para que no convierta a factores
na.strings = c("", "NA")) # para tratar los vacíos como NA
View(datosP)
View(datosP)
Price <- MustangPrice$Price
medianaPrice <- median(Price)
Price.length()
Price <- MustangPrice$Price
medianaPrice <- median(Price)
medianasBoot <- 0
for (i in 1:5000){
muestraBoot <- sample(Price, length(Price), replace = TRUE)
medianasBoot[i] <- median(muestraBoot)
}
set.seed(2025)
library(Lock5Data)
data("MustangPrice")
Price <- MustangPrice$Price
medianaPrice <- median(Price)
medianasBoot <- 0
for (i in 1:5000){
muestraBoot <- sample(Price, length(Price), replace = TRUE)
medianasBoot[i] <- median(muestraBoot)
}
hist(medianasBoot,
main = "Bootstrap para la mediana de Price",
freq = FALSE)
hist(medianasBoot,
main = "Bootstrap para la mediana de Price",
freq = FALSE,
breaks = 15)
hist(medianasBoot,
main = "Bootstrap para la mediana de Price",
freq = FALSE,
breaks = 15)
hist(medianasBoot,
main = "Bootstrap para la mediana de Price",
freq = FALSE,
breaks = 15,
col = "lightblue",
xlab = "Mediana de Price")
hist(medianasBoot,
main = "Bootstrap para la mediana de Price",
freq = FALSE,
breaks = 18,
col = "lightblue",
xlab = "Mediana de Price")
meanPrice <- mean(Price)
meansBoot <- 0
for (i in 1:5000){
muestraBoot <- sample(Price, length(Price), replace = TRUE)
meansBoot[i] <- mean(muestraBoot)
}
hist(meansBoot,
main = "Bootstrap para la media de Price",
freq = FALSE,
breaks = 18,
col = "lightblue",
xlab = "Media de Price")
boot.metodo1 <- function(nivel, B, datos){
mediana <- median(datos)
medianasBoot <- 0
for(i in 1:B){
muestrab <- sample(datos, length(datos), replace = TRUE)
medianasBoot[i] <- median(muestrab)
}
sdMediana <- sd(medianasBoot)
cuantil <- qnorm(1 - (1-nivel)/2, mean = 0, sd = 1)
termino <- cuantil * sdMediana
izq <- mediana - termino
der <- mediana + termino
return (c(izq, der))
}
bool.metod2 <- function(nivel, B, datos){
alfa <- 1 - nivel
medianasBoot <- 0
for(i in 1:B){
muestrab <- sample(datos, length(datos), replace = TRUE)
medianasBoot[i] <- median(muestrab)
}
intervalo <- quantile(medianasBoot, probs = c(alfa/2, 1- alfa/2))
return (intervalo)
}
bool.metodo2 <- function(nivel, B, datos){
alfa <- 1 - nivel
medianasBoot <- 0
for(i in 1:B){
muestrab <- sample(datos, length(datos), replace = TRUE)
medianasBoot[i] <- median(muestrab)
}
intervalo <- quantile(medianasBoot, probs = c(alfa/2, 1- alfa/2))
return (intervalo)
}
boot.metodo2 <- function(nivel, B, datos){
alfa <- 1 - nivel
medianasBoot <- 0
for(i in 1:B){
muestrab <- sample(datos, length(datos), replace = TRUE)
medianasBoot[i] <- median(muestrab)
}
intervalo <- quantile(medianasBoot, probs = c(alfa/2, 1- alfa/2))
return (intervalo)
}
datos <- rnorm(30, 0, 1)
nivel <- 0.95
B <- 2000
intervalo_1 <- boot.metodo2(nivel, B, datos)
intervalo_1 <- boot.metodo1(nivel, B, datos)
intervalos <- vector(list(), 1000)
intervalos <- vector("list", 1000)
cubrimiento <- 0
longitud <- 0
for (i in 1:1000){
int <- boot.metodo1(nivel,B,datos)
intervalos[[i]] <- int
cubrimiento[i] <- int[1] <= 0 && 0 <= int[2]
longitud[i] <- int[2] - int[1]
}
boot.metodo1 <- function(nivel, B, datos){
mediana <- median(datos)
medianasBoot <- 0
for(i in 1:B){
muestrab <- sample(datos, length(datos), replace = TRUE)
medianasBoot[i] <- median(muestrab)
}
sdMediana <- sd(medianasBoot)
cuantil <- qnorm(1 - (1-nivel)/2, mean = 0, sd = 1)
termino <- cuantil * sdMediana
izq <- mediana - termino
der <- mediana + termino
return (c(izq, der))
}
boot.metodo2 <- function(nivel, B, datos){
alfa <- 1 - nivel
medianasBoot <- 0
for(i in 1:B){
muestrab <- sample(datos, length(datos), replace = TRUE)
medianasBoot[i] <- median(muestrab)
}
intervalo <- quantile(medianasBoot, probs = c(alfa/2, 1- alfa/2))
return (intervalo)
}
datos <- rnorm(30, 0, 1)
nivel <- 0.95
B <- 2000
intervalo_1 <- boot.metodo1(nivel, B, datos)
intervalos <- vector("list", 1000)
cubrimiento <- 0
longitud <- 0
for (i in 1:1000){
int <- boot.metodo1(nivel,B,datos)
intervalos[[i]] <- int
cubrimiento[i] <- int[1] <= 0 && 0 <= int[2]
longitud[i] <- int[2] - int[1]
}
for (i in 1:1000){
int <- boot.metodo1(nivel,B,datos)
intervalos[[i]] <- int
cubrimiento[i] <- int[1] <= 0 && 0 <= int[2]
longitud[i] <- int[2] - int[1]
}
boot.metodo1 <- function(nivel, B, datos){
mediana <- median(datos)
medianasBoot <- 0
for(i in 1:B){
muestrab <- sample(datos, length(datos), replace = TRUE)
medianasBoot[i] <- median(muestrab)
}
sdMediana <- sd(medianasBoot)
cuantil <- qnorm(1 - (1-nivel)/2, mean = 0, sd = 1)
termino <- cuantil * sdMediana
izq <- mediana - termino
der <- mediana + termino
return (c(izq, der))
}
boot.metodo2 <- function(nivel, B, datos){
alfa <- 1 - nivel
medianasBoot <- 0
for(i in 1:B){
muestrab <- sample(datos, length(datos), replace = TRUE)
medianasBoot[i] <- median(muestrab)
}
intervalo <- quantile(medianasBoot, probs = c(alfa/2, 1- alfa/2))
return (intervalo)
}
datos <- rnorm(30, 0, 1)
nivel <- 0.95
B <- 2000
intervalo_1 <- boot.metodo1(nivel, B, datos)
# --- Ejecutar nIter iteraciones usando replicate ---
intervalos <- replicate(nIter, boot.metodo1(nivel, B, datos), simplify = FALSE)
# --- Ejecutar nIter iteraciones usando replicate ---
intervalos <- replicate(1000, boot.metodo1(nivel, B, datos), simplify = FALSE)
# --- Calcular cobertura (si el valor 0 está dentro del intervalo) ---
cubrimiento <- sapply(intervalos, function(int) int[1] <= 0 && 0 <= int[2])
# --- Calcular longitud de cada intervalo ---
longitud <- sapply(intervalos, function(int) int[2] - int[1])
# --- Resultados ---
proporcion_cubrimiento <- mean(cubrimiento)
longitud_promedio <- mean(longitud)
ns <- c(30,50, 100, 1000)
tabla_info <- data.frame(
n = numeric(),
cubrimiento = numeric(),
longitud = numeric()
)
for (n in ns) {
intervalos <- replicate(1000, boot.metodo1(nivel, B, datos), simplify = FALSE)
cubrimiento <- sapply(intervalos, function(int) int[1] <= 0 && 0 <= int[2])
longitud <- sapply(intervalos, function(int) int[2] - int[1])
proporcion_cubrimiento <- mean(cubrimiento)
longitud_promedio <- mean(longitud)
tabla_info <- rbind(tabla_info,
data.frame(n = n,
cubrimiento = proporcion_cubrimiento,
longitud = longitud_promedio))
}
View(tabla_info)
tabla_info2 <- data.frame(
n = numeric(),
cubrimiento = numeric(),
longitud = numeric()
)
for (n in ns) {
intervalos <- replicate(1000, boot.metodo2(nivel, B, datos), simplify = FALSE)
cubrimiento <- sapply(intervalos, function(int) int[1] <= 0 && 0 <= int[2])
longitud <- sapply(intervalos, function(int) int[2] - int[1])
proporcion_cubrimiento <- mean(cubrimiento)
longitud_promedio <- mean(longitud)
tabla_info2 <- rbind(tabla_info2,
data.frame(n = n,
cubrimiento = proporcion_cubrimiento,
longitud = longitud_promedio))
}
View(tabla_info2)
ns <- c(30,50, 100, 1000)
tabla_info <- data.frame(
n = numeric(),
cubrimiento = numeric(),
longitud = numeric()
)
for (n in ns) {
datos <- rnorm(n, 0, 1)
intervalos <- replicate(1000, boot.metodo1(nivel, B, datos), simplify = FALSE)
cubrimiento <- sapply(intervalos, function(int) int[1] <= 0 && 0 <= int[2])
longitud <- sapply(intervalos, function(int) int[2] - int[1])
proporcion_cubrimiento <- mean(cubrimiento)
longitud_promedio <- mean(longitud)
tabla_info <- rbind(tabla_info,
data.frame(n = n,
cubrimiento = proporcion_cubrimiento,
longitud = longitud_promedio))
}
View(tabla_info)
ns <- c(30,50, 100, 1000)
tabla_info <- data.frame(
n = numeric(),
cubrimiento = numeric(),
longitud = numeric()
)
for (n in ns) {
intervalos <- replicate(1000, {
datos <- rnorm(n, 0, 1)  # NUEVA MUESTRA CADA VEZ
boot.metodo1(nivel, B, datos)
}, simplify = FALSE)
cubrimiento <- sapply(intervalos, function(int) int[1] <= 0 && 0 <= int[2])
longitud <- sapply(intervalos, function(int) int[2] - int[1])
proporcion_cubrimiento <- mean(cubrimiento)
longitud_promedio <- mean(longitud)
tabla_info <- rbind(tabla_info,
data.frame(n = n,
cubrimiento = proporcion_cubrimiento,
longitud = longitud_promedio))
}
View(tabla_info)
View(tabla_info)
